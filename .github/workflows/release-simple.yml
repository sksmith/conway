name: Simple Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Run tests
      run: go test -race ./...

    - name: Get current version
      id: get_version
      run: |
        # Get the latest tag, or use v0.0.0 if no tags exist
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        
        # Calculate next version (simple patch increment)
        VERSION=${LATEST_TAG#v}
        MAJOR=$(echo $VERSION | cut -d. -f1)
        MINOR=$(echo $VERSION | cut -d. -f2)
        PATCH=$(echo $VERSION | cut -d. -f3)
        NEXT_PATCH=$((PATCH + 1))
        NEXT_VERSION="v${MAJOR}.${MINOR}.${NEXT_PATCH}"
        echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
        
        # Check if there are new commits since last tag
        if [ "$LATEST_TAG" != "v0.0.0" ]; then
          COMMITS_SINCE_TAG=$(git rev-list --count ${LATEST_TAG}..HEAD)
        else
          COMMITS_SINCE_TAG=1
        fi
        echo "commits_since_tag=$COMMITS_SINCE_TAG" >> $GITHUB_OUTPUT

    - name: Create tag
      if: steps.get_version.outputs.commits_since_tag != '0'
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag ${{ steps.get_version.outputs.next_version }}
        git push origin ${{ steps.get_version.outputs.next_version }}

    - name: Log in to GitHub Container Registry
      if: steps.get_version.outputs.commits_since_tag != '0'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Run GoReleaser
      if: steps.get_version.outputs.commits_since_tag != '0'
      uses: goreleaser/goreleaser-action@v6
      with:
        distribution: goreleaser
        version: '~> v2'
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}